{"version":3,"sources":["Components/ApplicationBar.module.css","Components/ActionButtons.module.css","Components/FigureGroup.module.css","Components/TableLayout.module.css","App.module.css","Components/TableLayout.js","utils.js","ReduxStore/matchSlice.js","Components/FigureGroup.js","Components/RefFigure.js","Components/green.png","Components/red.png","Components/ActionButtons.js","ReduxStore/resultDialogSlice.js","Components/ApplicationBar.js","ReduxStore/store.js","Components/ResultDialog.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","RowDefinition","style","flex","this","Row","props","className","styles","tableLayoutRow","children","ColumnDefinition","Column","tableLayoutColumn","TableLayout","rows","columns","cells","extractCell","rIndex","cIndex","tableLayout","map","r","c","randomInt","lb","ub","Math","floor","random","matcherSlice","createSlice","name","initialState","MAX_SET_NUMBER","exerciseSet","currentFigureSet","currentFigureSetIndex","currentRefFigure","currentExpectedAnswer","totalAnswer","wrongAnsweredFigureSets","reducers","restart","state","action","initExerciseSet","set","i","push","fIndex","sIndex","tmp","nextFigureSet","answerFigureSet","prepare","response","payload","reducer","wrongAnswer","figureSet","refFigure","expectAnswer","givenAnswer","actions","selectCurrentFigureSet","matcher","selectCurrentRefFigure","FigureGroup","useState","imgSize","setImgSize","figSet","useSelector","figures","value","figureDiv","ref","el","bRect","getBoundingClientRect","h","height","w","width","src","alt","RefFigure","refFig","ActionButtons","dispatch","useDispatch","classnames","container","red","ImgRed","onClick","green","ImgGreen","resultDialogSlice","open","resultDialogShow","resultDialogClose","selectResultDialogOpen","resultDialog","ApplicationBar","Button","variant","startIcon","appBarBtn","Typography","appBarTitle","finish","configureStore","matcherReducer","resultDialogReducer","ResultDialog","store","getState","wrongAnswers","selectWrongAnsweredFigureSets","Dialog","onClose","DialogTitle","DialogContent","DialogContentText","length","round","App","appRoot","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0fce692b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"appBarTitle\":\"ApplicationBar_appBarTitle__1nnkF\",\"appBarBtn\":\"ApplicationBar_appBarBtn__6gmgi\",\"restart\":\"ApplicationBar_restart__wig9M\",\"finish\":\"ApplicationBar_finish__135b9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"ActionButtons_container__23jy2\",\"red\":\"ActionButtons_red__2ytrB\",\"green\":\"ActionButtons_green__2IwDx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"figureImg\":\"FigureGroup_figureImg__q4HWY\",\"figureDiv\":\"FigureGroup_figureDiv__1tazq\",\"imgWrap\":\"FigureGroup_imgWrap__3Bkhk\",\"refFigureImg\":\"FigureGroup_refFigureImg__1LtV3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tableLayout\":\"TableLayout_tableLayout__1huF7\",\"tableLayoutRow\":\"TableLayout_tableLayoutRow__20Rnd\",\"tableLayoutColumn\":\"TableLayout_tableLayoutColumn__302xo\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"appRoot\":\"App_appRoot__229Xc\"};","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport styles from \"./TableLayout.module.css\";\n\nexport class RowDefinition {\n  style = {};\n  constructor(style = { flex: 1 }) {\n    this.style = style;\n  }\n}\n\nRow.propTypes = {\n  style: PropTypes.object.isRequired,\n};\n\nfunction Row(props) {\n  return (\n    <div className={styles.tableLayoutRow} style={props.style}>\n      {props.children}\n    </div>\n  );\n}\n\nColumn.propTypes = {\n  style: PropTypes.object.isRequired,\n};\n\nexport class ColumnDefinition {\n  style = {};\n  constructor(style = { flex: 1 }) {\n    this.style = style;\n  }\n}\n\nfunction Column(props) {\n  return (\n    <div className={styles.tableLayoutColumn} style={props.style}>\n      {props.children}\n    </div>\n  );\n}\n\nTableLayout.propTypes = {\n  style: PropTypes.object,\n  rows: PropTypes.array.isRequired,\n  columns: PropTypes.array.isRequired,\n  cells: PropTypes.array.isRequired,\n};\n\nexport function TableLayout(props) {\n  const { style, rows, columns, cells } = props;\n\n  const extractCell = (rIndex, cIndex) => {\n    if (cells && cells[rIndex] && cells[rIndex][cIndex]) {\n      return cells[rIndex][cIndex];\n    }\n  };\n\n  return (\n    <div className={styles.tableLayout} style={style}>\n      {rows.map((r, rIndex) => {\n        return (\n          <Row key={rIndex} style={r.style}>\n            {columns.map((c, cIndex) => {\n              return (\n                <Column key={cIndex} style={c.style}>\n                  {extractCell(rIndex, cIndex)}\n                </Column>\n              );\n            })}\n          </Row>\n        );\n      })}\n    </div>\n  );\n}\n\nexport default TableLayout;\n","export const randomInt = (lb, ub) => {\n  return lb + Math.floor(Math.random() * (ub - lb));\n};\n","import { createSlice } from \"@reduxjs/toolkit\";\nimport { randomInt } from \"../utils\";\n\nconst getInitialState = () => {\n  return {\n    MAX_SET_NUMBER: 30,\n    exerciseSet: [],\n    currentFigureSet: -1,\n    currentFigureSetIndex: -1,\n    currentRefFigure: -1,\n    currentExpectedAnswer: -1,\n    totalAnswer: 0,\n    wrongAnsweredFigureSets: [],\n  };\n};\n\nexport const matcherSlice = createSlice({\n  name: \"matcher\",\n  initialState: getInitialState(),\n  reducers: {\n    restart: (state, action) => {\n      return getInitialState();\n    },\n    initExerciseSet: (state, action) => {\n      const set = [];\n      for (let i = 0; i < state.MAX_SET_NUMBER; i++) {\n        set.push(i);\n      }\n\n      for (let i = 0; i < state.MAX_SET_NUMBER; i++) {\n        const fIndex = randomInt(0, state.MAX_SET_NUMBER);\n        const sIndex = randomInt(0, state.MAX_SET_NUMBER);\n        if (fIndex === sIndex) continue;\n        const tmp = set[fIndex];\n        set[fIndex] = set[sIndex];\n        set[sIndex] = tmp;\n      }\n\n      return { ...state, exerciseSet: set };\n    },\n    nextFigureSet: (state, action) => {\n      state.currentFigureSetIndex++;\n      if (state.currentFigureSetIndex >= state.MAX_SET_NUMBER) {\n        state.currentFigureSetIndex = 0;\n      }\n      state.currentFigureSet = state.exerciseSet[state.currentFigureSetIndex];\n\n      if (randomInt(0, 2) === 0) {\n        // One of the exists images [0,1,2,3]\n        state.currentRefFigure = randomInt(0, 4);\n        state.currentExpectedAnswer = 1;\n      } else {\n        // None exists one\n        state.currentRefFigure = 4;\n        state.currentExpectedAnswer = 0;\n      }\n    },\n    answerFigureSet: {\n      prepare: (response) => {\n        return { payload: { response } };\n      },\n      reducer: (state, action) => {\n        state.totalAnswer++;\n        if (state.currentExpectedAnswer !== action.payload.response) {\n          const wrongAnswer = {\n            figureSet: state.currentFigureSet,\n            refFigure: state.currentRefFigure,\n            expectAnswer: state.currentExpectedAnswer,\n            givenAnswer: action.payload.response,\n          };\n          state.wrongAnsweredFigureSets.push(wrongAnswer);\n        }\n      },\n    },\n  },\n});\n\nexport const {\n  restart,\n  initExerciseSet,\n  nextFigureSet,\n  answerFigureSet,\n} = matcherSlice.actions;\n\nexport const selectCurrentFigureSet = (state) => state.matcher.currentFigureSet;\nexport const selectCurrentRefFigure = (state) => state.matcher.currentRefFigure;\nexport const selectTotalAnswer = (state) => state.matcher.totalAnswer;\nexport const selectWrongAnsweredFigureSets = (state) =>\n  state.matcher.wrongAnsweredFigureSets;\nexport default matcherSlice.reducer;\n","import React, { useState } from \"react\";\nimport styles from \"./FigureGroup.module.css\";\nimport TableLayout, { ColumnDefinition, RowDefinition } from \"./TableLayout\";\nimport { useSelector } from \"react-redux\";\nimport { selectCurrentFigureSet } from \"../ReduxStore/matchSlice\";\n\nconst FigureGroup = (props) => {\n  const [imgSize, setImgSize] = useState(0);\n  const figSet = useSelector(selectCurrentFigureSet);\n\n  const figures = [0, 1, 2, 3].map((value) => {\n    return (\n      <div\n        className={styles.figureDiv}\n        ref={(el) => {\n          if (!el) return;\n          const bRect = el.getBoundingClientRect();\n          const h = bRect.height;\n          const w = bRect.width;\n          if (h <= w) {\n            if (h !== imgSize) {\n              setImgSize(h);\n            }\n          } else {\n            if (w !== imgSize) {\n              setImgSize(w);\n            }\n          }\n        }}\n      >\n        <img\n          src={\n            figSet > -1 ? `Images/${figSet}/${value}.jpg` : \"Images/base.jpg\"\n          }\n          width={imgSize - 10}\n          height={imgSize - 10}\n          alt={`fig${value}`}\n        />\n      </div>\n    );\n  });\n\n  return (\n    <TableLayout\n      rows={[new RowDefinition()]}\n      columns={[\n        new ColumnDefinition(),\n        new ColumnDefinition(),\n        new ColumnDefinition(),\n        new ColumnDefinition(),\n      ]}\n      cells={[\n        figures,\n        // [\n        // <div\n        //   className={styles.figureDiv}\n        //   ref={(el) => {\n        //     if (!el) return;\n        //     const bRect = el.getBoundingClientRect();\n        //     const h = bRect.height;\n        //     const w = bRect.width;\n        //     if (h <= w) {\n        //       if (h !== imgSize) {\n        //         setImgSize(h);\n        //       }\n        //     } else {\n        //       if (w !== imgSize) {\n        //         setImgSize(w);\n        //       }\n        //     }\n        //   }}\n        // >\n        //   <img\n        //     src={\"Images/0/0.jpg\"}\n        //     width={imgSize - 10}\n        //     height={imgSize - 10}\n        //   />\n        // </div>,\n        // <div className={styles.figureDiv}>\n        //   <img\n        //     src={\"Images/0/0.jpg\"}\n        //     width={imgSize - 10}\n        //     height={imgSize - 10}\n        //   />{\" \"}\n        // </div>,\n        // <div className={styles.figureDiv}>\n        //   <img\n        //     src={\"Images/0/0.jpg\"}\n        //     width={imgSize - 10}\n        //     height={imgSize - 10}\n        //   />{\" \"}\n        // </div>,\n        // <div className={styles.figureDiv}>\n        //   <img\n        //     src={\"Images/0/0.jpg\"}\n        //     width={imgSize - 10}\n        //     height={imgSize - 10}\n        //   />{\" \"}\n        // </div>,\n        // ],\n      ]}\n    />\n  );\n};\n\nFigureGroup.propTypes = {};\n\nexport default FigureGroup;\n","import React, { useState } from \"react\";\nimport styles from \"./FigureGroup.module.css\";\nimport { useSelector } from \"react-redux\";\nimport {\n  selectCurrentFigureSet,\n  selectCurrentRefFigure,\n} from \"../ReduxStore/matchSlice\";\n\nconst RefFigure = (props) => {\n  const [imgSize, setImgSize] = useState(0);\n  const figSet = useSelector(selectCurrentFigureSet);\n  const refFig = useSelector(selectCurrentRefFigure);\n  return (\n    <div\n      className={styles.figureDiv}\n      ref={(el) => {\n        if (!el) return;\n        const bRect = el.getBoundingClientRect();\n        const h = bRect.height;\n        const w = bRect.width / 4;\n        if (h <= w) {\n          if (h !== imgSize) {\n            setImgSize(h);\n          }\n        } else {\n          if (w !== imgSize) {\n            setImgSize(w);\n          }\n        }\n      }}\n    >\n      <img\n        src={figSet > -1 ? `Images/${figSet}/${refFig}.jpg` : \"Images/base.jpg\"}\n        width={imgSize - 10}\n        height={imgSize - 10}\n        alt={\"refFigure\"}\n      />\n    </div>\n  );\n};\n\nRefFigure.propTypes = {};\n\nexport default RefFigure;\n","export default __webpack_public_path__ + \"static/media/green.307be109.png\";","export default __webpack_public_path__ + \"static/media/red.f326c9ba.png\";","import React, { useState } from \"react\";\nimport styles from \"./ActionButtons.module.css\";\nimport TableLayout, { ColumnDefinition, RowDefinition } from \"./TableLayout\";\nimport ImgGreen from \"./green.png\";\nimport ImgRed from \"./red.png\";\nimport classnames from \"classnames\";\nimport { useDispatch } from \"react-redux\";\nimport { answerFigureSet, nextFigureSet } from \"../ReduxStore/matchSlice\";\n\nconst ActionButtons = (props) => {\n  const [imgSize, setImgSize] = useState(0);\n  const dispatch = useDispatch();\n\n  const onGreen = () => {\n    dispatch(answerFigureSet(1));\n    dispatch(nextFigureSet());\n  };\n\n  const onRed = () => {\n    dispatch(answerFigureSet(0));\n    dispatch(nextFigureSet());\n  };\n\n  return (\n    <TableLayout\n      rows={[new RowDefinition()]}\n      columns={[new ColumnDefinition(), new ColumnDefinition()]}\n      cells={[\n        [\n          <div\n            className={classnames(styles.container, styles.red)}\n            ref={(el) => {\n              if (!el) return;\n              const bRect = el.getBoundingClientRect();\n              const h = bRect.height;\n              const w = bRect.width;\n              if (h <= w) setImgSize(h);\n              else setImgSize(w);\n            }}\n          >\n            <img\n              src={ImgRed}\n              height={imgSize}\n              width={imgSize}\n              onClick={onRed}\n              alt={\"red\"}\n            />\n            ,\n          </div>,\n          <div className={classnames(styles.container, styles.green)}>\n            <img\n              src={ImgGreen}\n              height={imgSize}\n              width={imgSize}\n              onClick={onGreen}\n              alt={\"green\"}\n            />\n            ,\n          </div>,\n        ],\n      ]}\n    />\n  );\n};\n\nActionButtons.propTypes = {};\n\nexport default ActionButtons;\n","import { createSlice } from \"@reduxjs/toolkit\";\n\nexport const resultDialogSlice = createSlice({\n  name: \"resultDialog\",\n  initialState: {\n    open: false,\n  },\n  reducers: {\n    resultDialogShow: (state, action) => {\n      state.open = true;\n    },\n    resultDialogClose: (state, action) => {\n      state.open = false;\n    },\n  },\n});\n\nexport const {\n  resultDialogShow,\n  resultDialogClose,\n} = resultDialogSlice.actions;\n\nexport const selectResultDialogOpen = (state) => state.resultDialog.open;\n\nexport default resultDialogSlice.reducer;\n","import React from \"react\";\nimport styles from \"./ApplicationBar.module.css\";\n\nimport TableLayout, { ColumnDefinition, RowDefinition } from \"./TableLayout\";\nimport { Button, Typography } from \"@material-ui/core\";\nimport { RiRestartLine } from \"react-icons/ri\";\nimport classnames from \"classnames\";\nimport { MdGrade } from \"react-icons/md\";\nimport { useDispatch } from \"react-redux\";\nimport {\n  initExerciseSet,\n  nextFigureSet,\n  restart,\n} from \"../ReduxStore/matchSlice\";\nimport { resultDialogShow } from \"../ReduxStore/resultDialogSlice\";\n\nconst ApplicationBar = () => {\n  const dispatch = useDispatch();\n  const onStartClick = () => {\n    dispatch(restart());\n    dispatch(initExerciseSet());\n    dispatch(nextFigureSet());\n  };\n\n  const onFinishClick = () => {\n    dispatch(resultDialogShow());\n  };\n  return (\n    <TableLayout\n      rows={[new RowDefinition()]}\n      columns={[\n        new ColumnDefinition({ width: 110 }),\n        new ColumnDefinition(),\n        new ColumnDefinition({ width: 110 }),\n      ]}\n      cells={[\n        [\n          <Button\n            variant={\"contained\"}\n            startIcon={<RiRestartLine />}\n            className={classnames(styles.appBarBtn, styles.restart)}\n            onClick={onStartClick}\n          >\n            <Typography>Başla</Typography>\n          </Button>,\n          <Typography className={styles.appBarTitle}>\n            Şekil Eşleştirme\n          </Typography>,\n          <Button\n            variant={\"contained\"}\n            startIcon={<MdGrade />}\n            className={classnames(styles.appBarBtn, styles.finish)}\n            onClick={onFinishClick}\n          >\n            <Typography>Bitir</Typography>\n          </Button>,\n        ],\n      ]}\n    />\n  );\n  // return <div className={styles.container}></div>;\n};\n\nexport default ApplicationBar;\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport matcherReducer from \"./matchSlice\";\nimport resultDialogReducer from \"./resultDialogSlice\";\n\nexport default configureStore({\n  reducer: {\n    matcher: matcherReducer,\n    resultDialog: resultDialogReducer,\n  },\n});\n","import React from \"react\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n  resultDialogClose,\n  selectResultDialogOpen,\n} from \"../ReduxStore/resultDialogSlice\";\nimport {\n  selectTotalAnswer,\n  selectWrongAnsweredFigureSets,\n} from \"../ReduxStore/matchSlice\";\nimport store from \"../ReduxStore/store\";\n\nexport default function ResultDialog() {\n  const open = useSelector(selectResultDialogOpen);\n  const dispatch = useDispatch();\n\n  const onClose = () => {\n    dispatch(resultDialogClose());\n  };\n\n  const totalAnswer = selectTotalAnswer(store.getState());\n  const wrongAnswers = selectWrongAnsweredFigureSets(store.getState());\n\n  return (\n    <Dialog open={open} onClose={onClose}>\n      <DialogTitle>{\"Alıştırma Sonucu\"}</DialogTitle>\n      <DialogContent>\n        <DialogContentText>\n          <div>{`Toplam cevaplandırılan şekil: ${totalAnswer}`}</div>\n          <div>{`Doğru cevap sayısı: ${\n            totalAnswer - wrongAnswers.length\n          }`}</div>\n          <div>{`Yanlış cevap sayısı: ${wrongAnswers.length}`}</div>\n          <div>{`Başarı oranı: %${Math.round(\n            (100 * (totalAnswer - wrongAnswers.length)) / totalAnswer\n          )}`}</div>\n        </DialogContentText>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","import React from \"react\";\nimport styles from \"./App.module.css\";\nimport TableLayout, {\n  ColumnDefinition,\n  RowDefinition,\n} from \"./Components/TableLayout\";\nimport FigureGroup from \"./Components/FigureGroup\";\nimport RefFigure from \"./Components/RefFigure\";\nimport ActionButtons from \"./Components/ActionButtons\";\nimport ApplicationBar from \"./Components/ApplicationBar\";\nimport ResultDialog from \"./Components/ResultDialog\";\n\nfunction App() {\n  return (\n    <div className={styles.appRoot}>\n      <TableLayout\n        rows={[\n          new RowDefinition({ height: 50 }),\n          new RowDefinition(),\n          new RowDefinition(),\n          new RowDefinition({ height: 75 }),\n        ]}\n        columns={[new ColumnDefinition()]}\n        cells={[\n          [<ApplicationBar />],\n          [<FigureGroup />],\n          [<RefFigure />],\n          [<ActionButtons />],\n        ]}\n      />\n      <ResultDialog />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport store from \"./ReduxStore/store\";\nimport { Provider } from \"react-redux\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}